//***************************************************************************
//                          main.cpp  -  RealTimePVB
//                             -------------------
//  begin            : Mrz 01 2007
//  generated by     : pvdevelop (C) 2000-2006 by Lehrig Software Engineering
//  email            : sebastian@lehrig.de
//***************************************************************************
#include "pvapp.h"
// todo: comment me out. you can insert these objects as extern in your masks. 
//rlModbusClient     modbus(modbusdaemon_MAILBOX,modbusdaemon_SHARED_MEMORY,modbusdaemon_SHARED_MEMORY_SIZE);
//rlSiemensTCPClient siemensTCP(siemensdaemon_MAILBOX,siemensdaemon_SHARED_MEMORY,siemensdaemon_SHARED_MEMORY_SIZE);
//rlPPIClient        ppi(ppidaemon_MAILBOX,ppidaemon_SHARED_MEMORY,ppidaemon_SHARED_MEMORY_SIZE);

rlSharedMemory shm("/srv/automation/shm/simulation.shm", sizeof(SIMULATION_DATA));
SIMULATION_DATA simulation_data;
rlThread reader_thread;

void *reader(void *arg)
{
  THREAD_PARAM *p = (THREAD_PARAM *) arg;

  while(p->running)
  {
    rlsleep(50);
    reader_thread.lock();
    shm.read(0, &simulation_data, sizeof(SIMULATION_DATA));
    reader_thread.unlock();
  }

  return arg;
}

static int getParams(const char *ini, POPUP_DATA *popup)
{
  const char *cptr;
  
  cptr = strstr(ini, "popup=");
  if (cptr != NULL)
  {
    if (cptr[6] == 't') popup->popup = true;
    else                popup->popup = false;  
  }

  cptr = strstr(ini, "x1=");
  if (cptr != NULL)
  {
    sscanf(cptr, "x1=%f", &popup->x1);
  }

  cptr = strstr(ini, "y1=");
  if (cptr != NULL)
  {
    sscanf(cptr, "y1=%f", &popup->y1);
  }

  cptr = strstr(ini, "x0=");
  if (cptr != NULL)
  {
    sscanf(cptr, "x0=%f", &popup->x0);
  }

  cptr = strstr(ini, "y0=");
  if (cptr != NULL)
  {
    sscanf(cptr, "y0=%f", &popup->y0);
  }

  cptr = strstr(ini, "scale=");
  if (cptr != NULL)
  {
    sscanf(cptr, "scale=%f", &popup->scale);
    printf("scale main:%f\n", popup->scale);
  }

  cptr = strstr(ini, "svgx0=");
  if (cptr != NULL)
  {
    sscanf(cptr, "svgx0=%f", &popup->svgx0);
  }

  cptr = strstr(ini, "svgy0=");
  if (cptr != NULL)
  {
    sscanf(cptr, "svgy0=%f", &popup->svgy0);
  }

  return 0;
}

int pvMain(PARAM *p)
{
  int ret;
  
  POPUP_DATA popup_data;
  p->user = &popup_data;

  pvSetCaption(p,"RealTimePVB");
  pvResize(p,0,800,600);
  //pvScreenHint(p,1024,768); // this may be used to automatically set the zoomfactor
  ret = 1;
  pvGetInitialMask(p);
  memset(&popup_data, 0, sizeof(popup_data));
  if(strncmp(p->initial_mask,"mask2",5) == 0)
  {
    getParams(p->initial_mask, &popup_data);
    ret = 2;
  }

  while(1)
  {
    switch(ret)
    {
      case 3:
        pvStatusMessage(p,-1,-1,-1,"mask3");
        ret = show_mask3(p);
        break;
      case 2:
        pvStatusMessage(p,-1,-1,-1,"mask2");
        ret = show_mask2(p);
        break;
      case 1:
        pvStatusMessage(p,-1,-1,-1,"mask1");
        ret = show_mask1(p);
        break;
      default:
        return 0;
    }
  }
}

#ifdef USE_INETD
int main(int ac, char **av)
{
PARAM p;

  pvInit(ac,av,&p);
  /* here you may interpret ac,av and set p->user to your data */
  pvMain(&p);
  return 0;
}
#else  // multi threaded server
int main(int ac, char **av)
{
PARAM p;
int   s;

  pvInit(ac,av,&p);
  memset(&simulation_data, 0, (int) sizeof(SIMULATION_DATA));
  reader_thread.create(reader,NULL);

  /* here you may interpret ac,av and set p->user to your data */
  while(1)
  {
    s = pvAccept(&p);
    if(s != -1) pvCreateThread(&p,s);
    else        break;
  }
  return 0;
}
#endif
