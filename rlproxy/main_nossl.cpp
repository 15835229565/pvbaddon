//***************************************************************************
//                          main.cpp  -  description
//                             -------------------
//  begin            : Mo. Okt. 24 14:29:28 2016
//  generated by     : pvdevelop (C) Lehrig Software Engineering
//  email            : lehrig@t-online.de
//***************************************************************************
#include "pvapp.h"
rlThread thread;
const char *accept_port = NULL, *connect_adr = NULL, *connect_port = NULL;

typedef struct
{
  rlSocket *accept_side;
  rlSocket *connect_to_side;
  int      receiver_has_terminated;
  int      receiver_is_ready;
}A_CONNECTION;

#define MAXBUF 2

void *a_receiver(void *arg)
{
  if(trace) printf("start a_receiver\n");
  char buf[MAXBUF];
  //int  len = 1;
  if(arg == NULL) return NULL;
  THREAD_PARAM *p = (THREAD_PARAM *) arg;
  A_CONNECTION *connection = (A_CONNECTION *) p->user;
  connection->receiver_is_ready = 1;
  int accept_side_sock = connection->accept_side->s;
  int connect_to_side_sock = connection->connect_to_side->s;
  while(connection->connect_to_side->isConnected())
  {
    //if((len = connection->connect_to_side->read(buf, 1, 10)) > 0)
    if(connection->connect_to_side->select(100) > 0)
    {
      if(recv(connect_to_side_sock,buf,1,0) <= 0)
      {
        connection->connect_to_side->disconnect();
      }
      else
      {
        //if(connection->accept_side->write(buf,len) < 0)
        if(send(accept_side_sock,buf,1,MSG_NOSIGNAL) <= 0)
        {
          connection->connect_to_side->disconnect();
        }
      }  
    }
  }
  connection->receiver_has_terminated = 1;
  return NULL;
}

void *a_connection(void *arg)
{
  if(trace) printf("start a_connection\n");
  char buf[MAXBUF];
  //int  len;
  if(arg == NULL) return NULL;
  THREAD_PARAM *p = (THREAD_PARAM *) arg;
  A_CONNECTION *connection = (A_CONNECTION *) p->user;
  //connection->connect_to_side = new rlSocket("pvbrowser.org",5050,1);
  connection->connect_to_side = new rlSocket(connect_adr,atoi(connect_port),1);
  if(connection->connect_to_side->connect() >= 0)
  {
    if(trace) printf("connected to remote node %s:%s\n", connect_adr, connect_port);
    thread.create(a_receiver, connection);
    while(connection->receiver_is_ready == 0)
    {
      rlsleep(10);
    }
    if(trace) printf("receiver said that he is ready\n");
    int accept_side_sock = connection->accept_side->s;
    int connect_to_side_sock = connection->connect_to_side->s;
    while(connection->connect_to_side->isConnected())
    {
      //if((len = connection->accept_side->read(buf, 1, 10)) > 0)
      //{
      //  connection->connect_to_side->write(buf,len);
      //}
      if(connection->accept_side->select(100) > 0)
      {
        if(recv(accept_side_sock,buf,1,0) <= 0)
        {
          connection->connect_to_side->disconnect();
        }
        else
        {
          if(send(connect_to_side_sock,buf,1,MSG_NOSIGNAL) <= 0)
          {
            connection->connect_to_side->disconnect();
          }
        }
      }
      //else if(len < 0)
      //{
      //  connection->connect_to_side->disconnect();
      //}
    }
    if(trace) printf("a_connection() lost connection\n");
  }
  while(connection->receiver_has_terminated == 0)
  {
    rlsleep(10);
  }
  if(trace) printf("cleanup\n");
  delete connection->accept_side;
  delete connection->connect_to_side;
  delete connection;
  return NULL;
}

int main(int ac, char **av)
{
BIO      *bio = NULL;
  
  for(int i=1; i<ac; i++)
  {
    char *arg = av[i];
    if     (strncmp(arg,"-accept_port=",13) == 0)
    {
      accept_port = &arg[13];
    }
    else if(strncmp(arg,"-connect_adr=",13) == 0)
    {
      connect_adr = &arg[13];
    }
    else if(strncmp(arg,"-connect_port=",14) == 0)
    {
      connect_port = &arg[14];
    }
  }

  if(accept_port == NULL || connect_adr == NULL || connect_port == NULL)
  {
    printf("usage:   rlproxy -accept_port=n -connect_adr=adr -connect_port=n\n");
    printf("example: rlproxy -accept_port=5050 -connect_adr=pvbrowser.org -connect_port=5050\n");
    return 0;
  }

  rlSocket rlsock("localhost",atoi(accept_port),0); // accept on this port

  // Set up the library 
  ERR_load_BIO_strings();
  SSL_load_error_strings();
  OpenSSL_add_all_algorithms();

  while(1)
  {
    if(rlsock.connect() >= 0)
    {
      if(trace) printf("rlsock.connect() was successfull at localhost:%s\n", accept_port);
      rlSocket *connection = new rlSocket(rlsock.s);
      A_CONNECTION *con = new A_CONNECTION;
      con->accept_side = connection;
      con->connect_to_side = NULL;
      con->receiver_has_terminated = 0;
      con->receiver_is_ready = 0;
      thread.create(a_connection, con);
    }
    else
    {
      printf("failure returned by rlsock.connect()\n");
    }
  }
  if(bio == NULL) return -1;
  if(ac == 1 && av[0] == NULL) return -1;
  return 0;
}
