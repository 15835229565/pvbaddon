//***************************************************************************
//                          main.cpp  -  description
//                             -------------------
//  begin            : Mi. Feb 16 13:32:11 2011
//  generated by     : pvdevelop (C) Lehrig Software Engineering
//  email            : lehrig@t-online.de
//***************************************************************************
#include "pvapp.h"
#include "rlthread.h"     // include this header for thread support
rlThread mythread;        // define a thread instance
typedef struct            // define your data structure if you need it
{
  int i;
  float f;
}myThreadsData;

void *myThread(void *arg) // define your thread function
{
  if(arg == NULL) return NULL;
  THREAD_PARAM  *p = (THREAD_PARAM *) arg;
  myThreadsData *d = (myThreadsData *) p->user;
  while(p->running)
  {
    printf("hello here is myThread. My data is i=%d f=%f\n", d->i, d->f);
    p->thread->lock();    // do something critical
    // for example write to a database
    p->thread->unlock();
    rlsleep(1000);        // goto sleep for 1 second
  }
  return arg;
}
// Within the above thread you can do some tasks that must run all the time
// independent of any user that connects to your pvserver.
// For example you might log some data from your PLC or fieldbus system to a database
// Or you might want to do some softPLC functions there
// Or you might want to do a custom DataAcquisition there over a serial line or TCP.
// You can define as much Threads as you want.

int pvMain(PARAM *p)
{
int ret;

  pvSetCaption(p,"pvs");
  pvResize(p,0,1280,1024);
  //pvScreenHint(p,1024,768); // this may be used to automatically set the zoomfactor
  ret = 1;
  pvGetInitialMask(p);
  if(strcmp(p->initial_mask,"mask1") == 0) ret = 1;

  while(1)
  {
    if(trace) printf("show_mask%d\n", ret);
    switch(ret)
    {
      case 1:
        pvStatusMessage(p,-1,-1,-1,"mask1");
        ret = show_mask1(p);
        break;
      default:
        return 0;
    }
  }
}

int main(int ac, char **av)
{
PARAM p;
int   s;
myThreadsData my_data;                // instance of your data

  pvInit(ac,av,&p);
  my_data.i = 123;                    // init your data
  my_data.f = 123.45f;
  mythread.create(myThread,&my_data); // start your thread here
  // you might start more thread here: my2thread.create(my2Thread,&my2_data);
  while(1)
  {
    s = pvAccept(&p);
    if(s != -1) pvCreateThread(&p,s);
    else        break;
  }
  return 0;
}
